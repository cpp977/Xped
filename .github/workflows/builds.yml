name: Builds

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [g++-10, clang++-12]
        LIBCXX: [ON, OFF]
        TENSOR_LIB: [Eigen, Array, Cyclops]
        STORAGE: [VecOfMat, Contiguous]
        exclude:
          # excludes libcxx for g++
          - compiler: g++-10
            LIBCXX: ON
          - compiler: clang++-12
            TENSOR_LIB: Cyclops
            LIBCXX: ON
          - STORAGE: Contiguous
            TENSOR_LIB: Cyclops
        include:
          - TENSOR_LIB: Eigen
            MATRIX_LIB: Eigen
            VECTOR_LIB: Eigen
            XPED_USE_AD: ON
            USE_MPI: OFF
          - TENSOR_LIB: Array
            MATRIX_LIB: Eigen
            VECTOR_LIB: Eigen
            XPED_USE_AD: ON
            USE_MPI: OFF
          - TENSOR_LIB: Cyclops
            MATRIX_LIB: Cyclops
            VECTOR_LIB: Cyclops
            XPED_USE_AD: OFF
            USE_MPI: ON

    steps:
    - uses: actions/checkout@v2
    - run: sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
    - run: sudo apt-get update
    - run: sudo apt-get install openmpi-bin libopenmpi-dev
    - uses: actions/checkout@v2
      with:
        repository: onqtam/doctest
        ref: master
        path: doctest-src
    - run: cd $GITHUB_WORKSPACE/doctest-src && cmake .
    - run: cd $GITHUB_WORKSPACE/doctest-src && cmake --build .
    - run: cd $GITHUB_WORKSPACE/doctest-src && sudo cmake --build . --target install
    - run: sudo cp -r $GITHUB_WORKSPACE/doctest-src/doctest/extensions /usr/local/include/doctest/
    - uses: actions/checkout@v2
      with:
        repository: cpp977/TOOLS
        token: ${{ secrets.TOOLS_CLONE }}
        ref: master
        path: tools-src
    - run: sudo mkdir -p /usr/local/include/TOOLS
    - run: sudo cp -r $GITHUB_WORKSPACE/tools-src/* /usr/local/include/TOOLS/
            
    - run: sudo apt-get install g++-10
    - run: sudo apt-get install gcc-10
    - run: sudo apt-get install gfortran-10
    - run: sudo apt-get install libc++abi1-12
    - run: sudo apt-get install libc++1-12
    - run: sudo apt-get install libc++-12-dev
    - run: sudo apt-get install libc++abi-12-dev
    - run: sudo apt-get install libgsl-dev
    - run: sudo apt-get install libgslcblas0
    - run: sudo apt-get install libboost-all-dev
    - run: sudo apt-get install lcov
    - run: sudo apt-get install libopenblas-dev
    - run: sudo apt-get install liblapacke-dev
    - run: sudo apt-get install libomp-12-dev

    - run: clang++-12 --version
    - run: g++-10 --version
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      env:
        CXX: ${{ matrix.compiler }}
      run: cmake $GITHUB_WORKSPACE -DBLA_VENDOR=OpenBLAS -DXPED_USE_BLAS=ON -DXPED_USE_LAPACK=ON -DXPED_USE_OPENMP=ON -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DXPED_USE_LIBCXX=${{ matrix.LIBCXX }} -DXPED_ENABLE_CCACHE=OFF -DXPED_TENSOR_LIB=${{ matrix.TENSOR_LIB }} -DXPED_MATRIX_LIB=${{ matrix.MATRIX_LIB }} -DXPED_VECTOR_LIB=${{ matrix.VECTOR_LIB }} -DXPED_BUILD_CYCLOPS=ON -DXPED_USE_MPI=${{ matrix.USE_MPI }} -DXPED_STORAGE=${{ matrix.STORAGE }} -DXPED_USE_AD=${{ matrix.XPED_USE_AD }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE -- VERBOSE=1 -j2
