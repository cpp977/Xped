name: Builds

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [g++-10, clang++]
        LIBCXX: [ON, OFF]
        TENSOR_LIB: [EIGEN_TENSOR, ARRAY_TENSOR, CYCLOPS_TENSOR]
        exclude:
          # excludes libcxx for g++
          - compiler: g++-10
            LIBCXX: ON
          - compiler: clang++
            TENSOR_LIB: CYCLOPS_TENSOR
        include:
          - TENSOR_LIB: EIGEN_TENSOR
            MATRIX_LIB: EIGEN_MATRIX
            VECTOR_LIB: EIGEN_VECTOR
          - TENSOR_LIB: ARRAY_TENSOR
            MATRIX_LIB: EIGEN_MATRIX
            VECTOR_LIB: EIGEN_VECTOR
          - TENSOR_LIB: CYCLOPS_TENSOR
            MATRIX_LIB: CYCLOPS_MATRIX
            VECTOR_LIB: CYCLOPS_VECTOR

    steps:
    - uses: actions/checkout@v2
    - uses: actions/checkout@v2
      with:
        repository: onqtam/doctest
        ref: master
        path: doctest-src
    - run: cd $GITHUB_WORKSPACE/doctest-src && cmake .
    - run: cd $GITHUB_WORKSPACE/doctest-src && cmake --build . --target INSTALL
    - run: sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
    - run: sudo apt update -qq
    - run: sudo apt install -qq g++-10
    - run: sudo apt install -qq libc++-11-dev
    - run: sudo apt install -qq libc++abi-11-dev
    - run: sudo apt install -qq libgsl-dev
    - run: sudo apt install -qq libgslcblas0
    - run: sudo apt install -qq libboost-all-dev
#    - run: sudo apt install -qq doctest-dev
    - run: sudo apt install -qq lcov
    - run: sudo apt install -qq libopenblas-dev
    - run: sudo apt install -qq liblapacke-dev
    - run: sudo apt install -qq openmpi-bin libopenmpi-dev
    - run: sudo apt install -qq libomp-dev
    
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      env:
        CXX: ${{ matrix.compiler }}
      run: cmake $GITHUB_WORKSPACE -DBLA_VENDOR=OpenBLAS -DXPED_USE_BLAS=ON -DXPED_USE_LAPACK=ON -DXPED_USE_OPENMP=ON -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DXPED_USE_LIBCXX=${{ matrix.LIBCXX }} -DXPED_ENABLE_CACHE=OFF -DXPED_TENSOR_LIB=${{ matrix.TENSOR_LIB }} -DXPED_MATRIX_LIB=${{ matrix.MATRIX_LIB }} -DXPED_VECTOR_LIB=${{ matrix.VECTOR_LIB }}

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE -- -j2
