name: Tests

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [g++-10, clang++]
        LIBCXX: [ON, OFF]
        TENSOR_LIB: [EIGEN_TENSOR, ARRAY_TENSOR]
        exclude:
          # excludes libcxx for g++
          - compiler: g++-10
            LIBCXX: ON
          - compiler: clang++
            TENSOR_LIB: ARRAY_TENSOR
            
    steps:
    - uses: actions/checkout@v2
    - run: sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
    - run: sudo apt update -qq
    - run: sudo apt install -qq libgsl-dev
    - run: sudo apt install -qq libgslcblas0
    - run: sudo apt install -qq libboost-all-dev
    - run: sudo apt install -qq g++-10
    - run: sudo apt install -qq doctest-dev
    - run: sudo apt install -qq lcov
      
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      env:         
        CXX: ${{ matrix.compiler }}
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DXPED_USE_BLAS=OFF -DXPED_USE_LAPACK=OFF -DXPED_USE_OPENMP=OFF -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DXPED_ENABLE_COVERAGE=ON -DXPED_USE_LIBCXX=${{ matrix.LIBCXX }} -DXPED_ENABLE_CACHE=OFF -DXPED_TENSOR_LIB=${{ matrix.TENSOR_LIB }}
      
    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE -- -j2

    - name: Test
      working-directory: ${{runner.workspace}}/build/tests
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
      
    - name: Generate coverage report
      if: matrix.compiler == 'g++-10'
      working-directory: ${{runner.workspace}}/build/tests
      run: |
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info # filter system-files
        lcov --remove coverage.info '${{runner.workspace}}/build/thirdparty/*' --output-file coverage.info # filter system-files
        lcov --list coverage.info # debug info
        
    - name: Upload coverage to Codecov
      if: matrix.compiler == 'g++-10'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ${{runner.workspace}}/build/tests/coverage.info
        directory: ${{runner.workspace}}/build/tests
        flags: unittests
        name: coverage
        fail_ci_if_error: true
        verbose: true
