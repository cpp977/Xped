diff --git a/ClebschGordan.cpp b/ClebschGordan.cpp
index 7a600b6..88becfb 100644
--- a/ClebschGordan.cpp
+++ b/ClebschGordan.cpp
@@ -1,232 +1,4 @@
-#include <algorithm>
-#include <cassert>
-#include <cmath>
-#include <cstdio>
-#include <cstdlib>
-#include <cstring>
-#include <functional>
-#include <fstream>
-#include <iostream>
-#include <map>
-#include <numeric>
-#include <vector>
-
-// Declaration of LAPACK subroutines
-// Make sure the data types match your version of LAPACK
-
-extern "C" void dgesvd_(char const* JOBU,
-                        char const* JOBVT,
-                        int const* M,
-                        int const* N,
-                        double* A,
-                        int const* LDA,
-                        double* S,
-                        double* U,
-                        int const* LDU,
-                        double* VT,
-                        int const* LDVT,
-                        double* WORK,
-                        int const* LWORK,
-                        int *INFO);
-
-extern "C" void dgels_(char const* TRANS,
-                       int const* M,
-                       int const* N,
-                       int const* NRHS,
-                       double* A,
-                       int const* LDA,
-                       double* B,
-                       int const* LDB,
-                       double* WORK,
-                       int const* LWORK,
-                       int *INFO);
-
-namespace clebsch {
-    const double EPS = 1e-12;
-
-    // binomial coefficients
-    class binomial_t {
-        std::vector<int> cache;
-        int N;
-
-    public:
-        int operator()(int n, int k);
-    } binomial;
-
-    // Eq. (19) and (25)
-    class weight {
-        std::vector<int> elem;
-
-    public:
-        // the N in "SU(N)"
-        const int N;
-
-        // create a non-initialized weight
-        weight(int N);
-
-        // create irrep weight of given index
-        // Eq. (C2)
-        weight(int N, int index);
-
-        // assign from another instance
-        clebsch::weight &operator=(const clebsch::weight &w);
-
-        // access elements of this weight (k = 1, ..., N)
-        int &operator()(int k);
-        const int &operator()(int k) const;
-
-        // compare weights
-        // Eq. (C1)
-        bool operator<(const weight &w) const;
-        bool operator==(const weight &w) const;
-
-        // element-wise sum of weights
-        clebsch::weight operator+(const weight &w) const;
-
-        // returns the index of this irrep weight (index = 0, 1, ...)
-        // Eq. (C2)
-        int index() const;
-
-        // returns the dimension of this irrep weight
-        // Eq. (22)
-        long long dimension() const;
-    };
-
-    // Eq. (20)
-    class pattern {
-        std::vector<int> elem;
-
-    public:
-        // the N in "SU(N)"
-        const int N;
-
-        // copy constructor
-        pattern(const pattern &pat);
-
-        // create pattern of given index from irrep weight
-        // Eq. (C7)
-        pattern(const weight &irrep, int index = 0);
-
-        // access elements of this pattern (l = 1, ..., N; k = 1, ..., l)
-        int &operator()(int k, int l);
-        const int &operator()(int k, int l) const;
-
-        // find succeeding/preceding pattern, return false if not possible
-        // Eq. (C9)
-        bool operator++();
-        bool operator--();
-
-        // returns the pattern index (index = 0, ..., dimension - 1)
-        // Eq. (C7)
-        int index() const;
-
-        // returns the pattern weight
-        // Eq. (25)
-        clebsch::weight get_weight() const;
-
-        // returns matrix element of lowering operator J^(l)_-
-        // between this pattern minus M^(k,l) and this pattern
-        // (l = 1, ..., N; k = 1, ..., l)
-        // Eq. (28)
-        double lowering_coeff(int k, int l) const;
-
-        // returns matrix element of raising operator J^(l)_+
-        // between this pattern plus M^(k,l) and this pattern
-        // (l = 1, ..., N; k = 1, ..., l)
-        // Eq. (29)
-        double raising_coeff(int k, int l) const;
-    };
-
-    class decomposition {
-        std::vector<clebsch::weight> weights;
-        std::vector<int> multiplicities;
-
-    public:
-        // the N in "SU(N)"
-        const int N;
-
-        // save given irreps for later use
-        const weight factor1, factor2;
-
-        // construct the decomposition of factor1 times factor2 into irreps
-        // Eq. (31)
-        decomposition(const weight &factor1, const weight &factor2);
-
-        // return the number of occurring irreps
-        int size() const;
-
-        // access the occurring irreps
-        // j = 0, ..., size() - 1
-        const clebsch::weight &operator()(int j) const;
-
-        // return the outer multiplicity of irrep in this decomposition
-        int multiplicity(const weight &irrep) const;
-    };
-
-    class index_adapter {
-        std::vector<int> indices;
-        std::vector<int> multiplicities;
-
-    public:
-        // the N in "SU(N)"
-        const int N;
-
-        // save given irreps for later use
-        const int factor1, factor2;
-
-        // construct this index_adapter from a given decomposition
-        index_adapter(const clebsch::decomposition &decomp);
-
-        // return the number of occurring irreps
-        int size() const;
-
-        // access the occurring irreps
-        int operator()(int j) const;
-
-        // return the outer multiplicity of irrep in this decomposition
-        int multiplicity(int irrep) const;
-    };
-
-    class coefficients {
-        std::map<std::vector<int>, double> clzx;
-
-        // access Clebsch-Gordan coefficients in convenient manner
-        void set(int factor1_state,
-                 int factor2_state,
-                 int multiplicity_index,
-                 int irrep_state,
-                 double value);
-
-        // internal functions, doing most of the work
-        void highest_weight_normal_form(); // Eq. (37)
-        void compute_highest_weight_coeffs(); // Eq. (36)
-        void compute_lower_weight_coeffs(int multip_index, int state, std::vector<char> &done); // Eq. (40)
-
-    public:
-        // the N in "SU(N)"
-        const int N;
-
-        // save irreps and their dimensions for later use
-        const weight factor1, factor2, irrep;
-        const int factor1_dimension, factor2_dimension, irrep_dimension;
-
-        // outer multiplicity of irrep in this decomposition
-        const int multiplicity;
-
-        // construct all Clebsch-Gordan coefficients of this decomposition
-        coefficients(const weight &irrep, const weight &factor1, const weight &factor2);
-
-        // access Clebsch-Gordan coefficients (read-only)
-        // multiplicity_index = 0, ..., multiplicity - 1
-        // factor1_state = 0, ..., factor1_dimension - 1
-        // factor2_state = 0, ..., factor2_dimension - 1
-        // irrep_state = 0, ..., irrep_dimension
-        double operator()(int factor1_state,
-                          int factor2_state,
-                          int multiplicity_index,
-                          int irrep_state) const;
-    };
-};
+#include "ClebschGordan.hpp"
 
 // implementation of "binomial_t" starts here
 
@@ -1038,253 +810,3 @@ double clebsch::coefficients::operator()(int factor1_state,
 
     return it != clzx.end() ? it->second : 0.0;
 }
-
-// sample driver routine
-
-using namespace std;
-
-int main() {
-    while (true) {
-        int choice, N;
-
-        cout << "What would you like to do?" << endl;
-        cout << "1) Translate an i-weight S to its index P(S)" << endl;
-        cout << "2) Recover an i-weight S from its index P(S)" << endl;
-        cout << "3) Translate a pattern M to its index Q(M)" << endl;
-        cout << "4) Recover a pattern M from its index Q(M)" << endl;
-        cout << "5) Calculate Clebsch-Gordan coefficients for S x S' -> S''" << endl;
-        cout << "6) Calculate all Glebsch-Gordan coefficients for S x S'" << endl;
-        cout << "0) Quit" << endl;
-
-        do {
-            cin >> choice;
-        } while (choice < 0 || choice > 6);
-
-        if (choice == 0) {
-            break;
-        }
-
-        cout << "N (e.g. 3): ";
-        cin >> N;
-
-        switch (choice) {
-            case 1: {
-                clebsch::weight S(N);
-                cout << "Irrep S: ";
-                for (int k = 1; k <= N; ++k) {
-                    cin >> S(k);
-                }
-                cout << S.index() << endl;
-                break;
-            }
-            case 2: {
-                int P;
-                cout << "Index: ";
-                cin >> P;
-                clebsch::weight S(N, P);
-                cout << "I-weight:";
-                for (int k = 1; k <= N; ++k) {
-                    cout << ' ' << S(k);
-                }
-                cout << endl;
-                break;
-            }
-            case 3: {
-                clebsch::pattern M(N);
-                for (int l = N; l >= 1; --l) {
-                    cout << "Row l = " << l << ": ";
-                    for (int k = 1; k <= l; ++k) {
-                        cin >> M(k, l);
-                    }
-                }
-                cout << "Index: " << M.index() + 1 << endl;
-                break;
-            }
-            case 4: {
-                clebsch::weight S(N);
-                cout << "Irrep S: ";
-                for (int i = 1; i <= N; ++i) {
-                    cin >> S(i);
-                }
-
-                int Q;
-                cout << "Index (1..dim(S)): ";
-                cin >> Q;
-                clebsch::pattern M(S, Q - 1);
-                for (int l = N; l >= 1; --l) {
-                    for (int k = 1; k <= l; ++k) {
-                        cout << M(k, l) << '\t';
-                    }
-                    cout << endl;
-                }
-                break;
-            }
-            case 5: {
-                clebsch::weight S(N);
-                cout << "Irrep S (e.g.";
-                for (int k = N - 1; k >= 0; --k) {
-                    cout << ' ' << k;
-                }
-                cout << "): ";
-                for (int k = 1; k <= N; ++k) {
-                    cin >> S(k);
-                }
-
-                clebsch::weight Sprime(N);
-                cout << "Irrep S' (e.g.";
-                for (int k = N - 1; k >= 0; --k) {
-                    cout << ' ' << k;
-                }
-                cout << "): ";
-                for (int k = 1; k <= N; ++k) {
-                    cin >> Sprime(k);
-                }
-
-                clebsch::decomposition decomp(S, Sprime);
-                cout << "Littlewood-Richardson decomposition S \\otimes S' = \\oplus S'':" << endl;
-                cout << "[irrep index] S'' (outer multiplicity) {dimension d_S}" << endl;
-                for (int i = 0; i < decomp.size(); ++i) {
-                    cout << "[" << decomp(i).index() << "] ";
-                    for (int k = 1; k <= N; ++k) {
-                        cout << decomp(i)(k) << ' ';
-                    }
-                    cout << '(' << decomp.multiplicity(decomp(i)) << ") {"
-                         << decomp(i).dimension() << "}" << endl;;
-                }
-
-                clebsch::weight Sdoubleprime(N);
-                for (bool b = true; b; ) {
-                    cout << "Irrep S'': ";
-                    for (int k = 1; k <= N; ++k) {
-                        cin >> Sdoubleprime(k);
-                    }
-                    for (int i = 0; i < decomp.size(); ++i) {
-                        if (decomp(i) == Sdoubleprime) {
-                            b = false;
-                            break;
-                        }
-                    }
-                    if (b) {
-                        cout << "S'' does not occur in the decomposition" << endl;
-                    }
-                }
-
-                int alpha;
-                while (true) {
-                    cout << "Outer multiplicity index: ";
-                    cin >> alpha;
-                    if (1 <= alpha && alpha <= decomp.multiplicity(Sdoubleprime)) {
-                        break;
-                    }
-                    cout << "S'' does not have this multiplicity" << endl;
-                }
-
-                string file_name;
-                cout << "Enter file name to write to file (leave blank for screen output): ";
-                cin.ignore(1234, '\n');
-                getline(cin, file_name);
-
-                const clebsch::coefficients C(Sdoubleprime, S, Sprime);
-                int dimS = S.dimension(),
-                    dimSprime = Sprime.dimension(),
-                    dimSdoubleprime = Sdoubleprime.dimension();
-
-                ofstream os(file_name.c_str());
-                (file_name.empty() ? cout : os).setf(ios::fixed);
-                (file_name.empty() ? cout : os).precision(15);
-                (file_name.empty() ? cout : os) << "List of nonzero CGCs for S x S' => S'', alpha" << endl;
-                (file_name.empty() ? cout : os) << "Q(M)\tQ(M')\tQ(M'')\tCGC" << endl;
-                for (int i = 0; i < dimSdoubleprime; ++i) {
-                    for (int j = 0; j < dimS; ++j) {
-                        for (int k = 0; k < dimSprime; ++k) {
-                            double x = double(C(j, k, alpha - 1, i));
-
-                            if (fabs(x) > clebsch::EPS) {
-                                (file_name.empty() ? cout : os) << j + 1 << '\t'
-                                    << k + 1 << '\t' << i + 1 << '\t' << x << endl;
-                            }
-                        }
-                    }
-                }
-
-                break;
-            }
-            case 6: {
-                clebsch::weight S(N);
-                cout << "Irrep S (e.g.";
-                for (int k = N - 1; k >= 0; --k) {
-                    cout << ' ' << k;
-                }
-                cout << "): ";
-                for (int k = 1; k <= N; ++k) {
-                    cin >> S(k);
-                }
-
-                clebsch::weight Sprime(N);
-                cout << "Irrep S' (e.g.";
-                for (int k = N - 1; k >= 0; --k) {
-                    cout << ' ' << k;
-                }
-                cout << "): ";
-                for (int k = 1; k <= N; ++k) {
-                    cin >> Sprime(k);
-                }
-
-                string file_name;
-                cout << "Enter file name to write to file (leave blank for screen output): ";
-                cin.ignore(1234, '\n');
-                getline(cin, file_name);
-
-                ofstream os(file_name.c_str());
-                (file_name.empty() ? cout : os).setf(ios::fixed);
-                (file_name.empty() ? cout : os).precision(15);
-
-                clebsch::decomposition decomp(S, Sprime);
-                (file_name.empty() ? cout : os) <<
-                    "Littlewood-Richardson decomposition S \\otimes S' = \\oplus S'':" << endl;
-                (file_name.empty() ? cout : os) <<
-                    "[irrep index] S'' (outer multiplicity) {dimension d_S}" << endl;
-                for (int i = 0; i < decomp.size(); ++i) {
-                    (file_name.empty() ? cout : os) << "[" << decomp(i).index() << "] ";
-                    for (int k = 1; k <= N; ++k) {
-                        (file_name.empty() ? cout : os) << decomp(i)(k) << ' ';
-                    }
-                    (file_name.empty() ? cout : os) << '(' << decomp.multiplicity(decomp(i)) << ") {"
-                         << decomp(i).dimension() << "}" << endl;;
-                }
-
-                for (int i = 0; i < decomp.size(); ++i) {
-                    const clebsch::coefficients C(decomp(i),S, Sprime);
-                    int dimS = S.dimension(),
-                        dimSprime = Sprime.dimension(),
-                        dimSdoubleprime = decomp(i).dimension();
-
-                    for (int m = 0; m < C.multiplicity; ++m) {
-                        (file_name.empty() ? cout : os) << "List of nonzero CGCs for S x S' => S'' = (";
-                        for (int j = 1; j <= N; ++j) cout << decomp(i)(j) << (j < N ? ' ' : ')');
-                        (file_name.empty() ? cout : os) << ", alpha = " << m + 1 << endl;
-                        (file_name.empty() ? cout : os) << "Q(M)\tQ(M')\tQ(M'')\tCGC" << endl;
-                        for (int i = 0; i < dimSdoubleprime; ++i) {
-                            for (int j = 0; j < dimS; ++j) {
-                                for (int k = 0; k < dimSprime; ++k) {
-                                    double x = double(C(j, k, m, i));
-
-                                    if (fabs(x) > clebsch::EPS) {
-                                        (file_name.empty() ? cout : os) << j  + 1<< '\t'
-                                            << k + 1 << '\t' << i + 1 << '\t' << x << endl;
-                                    }
-                                }
-                            }
-                        }
-
-                        (file_name.empty() ? cout : os) << endl;
-                    }
-                }
-
-                break;
-            }
-        }
-    }
-
-    return 0;
-}
diff --git a/ClebschGordan.hpp b/ClebschGordan.hpp
index e69de29..576d4f8 100644
--- a/ClebschGordan.hpp
+++ b/ClebschGordan.hpp
@@ -0,0 +1,234 @@
+#ifndef CLEBSCH_GORDAN_HPP_
+#define CLEBSCH_GORDAN_HPP_
+
+#include <algorithm>
+#include <cassert>
+#include <cmath>
+#include <cstdio>
+#include <cstdlib>
+#include <cstring>
+#include <functional>
+#include <fstream>
+#include <iostream>
+#include <map>
+#include <numeric>
+#include <vector>
+
+// Declaration of LAPACK subroutines
+// Make sure the data types match your version of LAPACK
+
+extern "C" void dgesvd_(char const* JOBU,
+                        char const* JOBVT,
+                        int const* M,
+                        int const* N,
+                        double* A,
+                        int const* LDA,
+                        double* S,
+                        double* U,
+                        int const* LDU,
+                        double* VT,
+                        int const* LDVT,
+                        double* WORK,
+                        int const* LWORK,
+                        int *INFO);
+
+extern "C" void dgels_(char const* TRANS,
+                       int const* M,
+                       int const* N,
+                       int const* NRHS,
+                       double* A,
+                       int const* LDA,
+                       double* B,
+                       int const* LDB,
+                       double* WORK,
+                       int const* LWORK,
+                       int *INFO);
+
+namespace clebsch {
+    const double EPS = 1e-12;
+
+    // binomial coefficients
+    class binomial_t {
+        std::vector<int> cache;
+        int N;
+
+    public:
+        int operator()(int n, int k);
+    } binomial;
+
+    // Eq. (19) and (25)
+    class weight {
+        std::vector<int> elem;
+
+    public:
+        // the N in "SU(N)"
+        const int N;
+
+        // create a non-initialized weight
+        weight(int N);
+
+        // create irrep weight of given index
+        // Eq. (C2)
+        weight(int N, int index);
+
+        // assign from another instance
+        clebsch::weight &operator=(const clebsch::weight &w);
+
+        // access elements of this weight (k = 1, ..., N)
+        int &operator()(int k);
+        const int &operator()(int k) const;
+
+        // compare weights
+        // Eq. (C1)
+        bool operator<(const weight &w) const;
+        bool operator==(const weight &w) const;
+
+        // element-wise sum of weights
+        clebsch::weight operator+(const weight &w) const;
+
+        // returns the index of this irrep weight (index = 0, 1, ...)
+        // Eq. (C2)
+        int index() const;
+
+        // returns the dimension of this irrep weight
+        // Eq. (22)
+        long long dimension() const;
+    };
+
+    // Eq. (20)
+    class pattern {
+        std::vector<int> elem;
+
+    public:
+        // the N in "SU(N)"
+        const int N;
+
+        // copy constructor
+        pattern(const pattern &pat);
+
+        // create pattern of given index from irrep weight
+        // Eq. (C7)
+        pattern(const weight &irrep, int index = 0);
+
+        // access elements of this pattern (l = 1, ..., N; k = 1, ..., l)
+        int &operator()(int k, int l);
+        const int &operator()(int k, int l) const;
+
+        // find succeeding/preceding pattern, return false if not possible
+        // Eq. (C9)
+        bool operator++();
+        bool operator--();
+
+        // returns the pattern index (index = 0, ..., dimension - 1)
+        // Eq. (C7)
+        int index() const;
+
+        // returns the pattern weight
+        // Eq. (25)
+        clebsch::weight get_weight() const;
+
+        // returns matrix element of lowering operator J^(l)_-
+        // between this pattern minus M^(k,l) and this pattern
+        // (l = 1, ..., N; k = 1, ..., l)
+        // Eq. (28)
+        double lowering_coeff(int k, int l) const;
+
+        // returns matrix element of raising operator J^(l)_+
+        // between this pattern plus M^(k,l) and this pattern
+        // (l = 1, ..., N; k = 1, ..., l)
+        // Eq. (29)
+        double raising_coeff(int k, int l) const;
+    };
+
+    class decomposition {
+        std::vector<clebsch::weight> weights;
+        std::vector<int> multiplicities;
+
+    public:
+        // the N in "SU(N)"
+        const int N;
+
+        // save given irreps for later use
+        const weight factor1, factor2;
+
+        // construct the decomposition of factor1 times factor2 into irreps
+        // Eq. (31)
+        decomposition(const weight &factor1, const weight &factor2);
+
+        // return the number of occurring irreps
+        int size() const;
+
+        // access the occurring irreps
+        // j = 0, ..., size() - 1
+        const clebsch::weight &operator()(int j) const;
+
+        // return the outer multiplicity of irrep in this decomposition
+        int multiplicity(const weight &irrep) const;
+    };
+
+    class index_adapter {
+        std::vector<int> indices;
+        std::vector<int> multiplicities;
+
+    public:
+        // the N in "SU(N)"
+        const int N;
+
+        // save given irreps for later use
+        const int factor1, factor2;
+
+        // construct this index_adapter from a given decomposition
+        index_adapter(const clebsch::decomposition &decomp);
+
+        // return the number of occurring irreps
+        int size() const;
+
+        // access the occurring irreps
+        int operator()(int j) const;
+
+        // return the outer multiplicity of irrep in this decomposition
+        int multiplicity(int irrep) const;
+    };
+
+    class coefficients {
+        std::map<std::vector<int>, double> clzx;
+
+        // access Clebsch-Gordan coefficients in convenient manner
+        void set(int factor1_state,
+                 int factor2_state,
+                 int multiplicity_index,
+                 int irrep_state,
+                 double value);
+
+        // internal functions, doing most of the work
+        void highest_weight_normal_form(); // Eq. (37)
+        void compute_highest_weight_coeffs(); // Eq. (36)
+        void compute_lower_weight_coeffs(int multip_index, int state, std::vector<char> &done); // Eq. (40)
+
+    public:
+        // the N in "SU(N)"
+        const int N;
+
+        // save irreps and their dimensions for later use
+        const weight factor1, factor2, irrep;
+        const int factor1_dimension, factor2_dimension, irrep_dimension;
+
+        // outer multiplicity of irrep in this decomposition
+        const int multiplicity;
+
+        // construct all Clebsch-Gordan coefficients of this decomposition
+        coefficients(const weight &irrep, const weight &factor1, const weight &factor2);
+
+        // access Clebsch-Gordan coefficients (read-only)
+        // multiplicity_index = 0, ..., multiplicity - 1
+        // factor1_state = 0, ..., factor1_dimension - 1
+        // factor2_state = 0, ..., factor2_dimension - 1
+        // irrep_state = 0, ..., irrep_dimension
+        double operator()(int factor1_state,
+                          int factor2_state,
+                          int multiplicity_index,
+                          int irrep_state) const;
+    };
+};
+
+#endif
