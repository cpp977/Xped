var searchData=
[
  ['val_0',['val',['../classXped_1_1Tensor_3_01Scalar___00_01Rank_00_01CoRank_00_01Symmetry___00_01true_00_01AllocationPolicy___01_4.html#ab9e5e584b335356b2525d0e27da097e5',1,'Xped::Tensor&lt; Scalar_, Rank, CoRank, Symmetry_, true, AllocationPolicy_ &gt;']]],
  ['val_5fop_1',['val_op',['../classXped_1_1Tensor_3_01Scalar___00_01Rank_00_01CoRank_00_01Symmetry___00_01true_00_01AllocationPolicy___01_4.html#a7bea9f69f42f5ab87e6c68fd247304f9',1,'Xped::Tensor&lt; Scalar_, Rank, CoRank, Symmetry_, true, AllocationPolicy_ &gt;']]],
  ['vec_5fadd_2',['vec_add',['../structXped_1_1PlainInterface.html#aff861342a398a459b17d031808e4c458',1,'Xped::PlainInterface::vec_add(VT &amp;&amp;vec, MType&lt; typename ctf_traits&lt; VT &gt;::Scalar &gt; &amp;res)'],['../structXped_1_1PlainInterface.html#ab4e0203004c48f348c5fc1905b0ed319',1,'Xped::PlainInterface::vec_add(const Eigen::Matrix&lt; Scalar, -1, 1 &gt; &amp;vec, MType&lt; Scalar &gt; &amp;res)']]],
  ['vec_5fdiff_3',['vec_diff',['../structXped_1_1PlainInterface.html#a01adcebd66ec3627be17ad38330f485e',1,'Xped::PlainInterface::vec_diff(VT &amp;&amp;vec, MType&lt; typename ctf_traits&lt; VT &gt;::Scalar &gt; &amp;res)'],['../structXped_1_1PlainInterface.html#a75e6b3c4949c889b5f30da54cbccfde5',1,'Xped::PlainInterface::vec_diff(const Eigen::Matrix&lt; Scalar, -1, 1 &gt; &amp;vec, MType&lt; Scalar &gt; &amp;res)']]],
  ['vec_5fto_5fdiagmat_4',['vec_to_diagmat',['../structXped_1_1PlainInterface.html#a197a1bed4e5882a546742b5a4f64fb65',1,'Xped::PlainInterface::vec_to_diagmat(const VType&lt; Scalar &gt; &amp;V)'],['../structXped_1_1PlainInterface.html#af807492413083c001942c233eddafa79',1,'Xped::PlainInterface::vec_to_diagmat(const VType&lt; Scalar &gt; &amp;V)'],['../structXped_1_1PlainInterface.html#a1494317f7e5f0bfc5622de7c2e79b528',1,'Xped::PlainInterface::vec_to_diagmat(VT &amp;&amp;V)']]],
  ['vec_5fto_5fstdvec_5',['vec_to_stdvec',['../structXped_1_1VectorInterface.html#a3f454976f0b718858bd2c4b190fd68e1',1,'Xped::VectorInterface::vec_to_stdvec(VT &amp;&amp;V, std::vector&lt; Scalar &gt; &amp;vec)'],['../structXped_1_1VectorInterface.html#aeea2d5d170708e9c401d265c2537a67f',1,'Xped::VectorInterface::vec_to_stdvec(const VType&lt; Scalar &gt; &amp;V, std::vector&lt; Scalar &gt; &amp;vec)']]],
  ['vecofmatiterator_6',['VecOfMatIterator',['../classXped_1_1internal_1_1VecOfMatIterator.html#a11ea41ff2c6bad80ecb300e21c7bdb1f',1,'Xped::internal::VecOfMatIterator::VecOfMatIterator()'],['../classXped_1_1internal_1_1VecOfMatIterator.html#ae5abb681bb9334d337915eb3dea9d21e',1,'Xped::internal::VecOfMatIterator::VecOfMatIterator(std::vector&lt; PlainInterface::MType&lt; Element &gt; &gt; *o_val, std::size_t block_num=0, std::size_t elem_num=0)']]],
  ['view_7',['view',['../classXped_1_1Tensor_3_01Scalar___00_01Rank_00_01CoRank_00_01Symmetry___00_01false_00_01AllocationPolicy___01_4.html#a5af638830e0c410a299650fb37001fed',1,'Xped::Tensor&lt; Scalar_, Rank, CoRank, Symmetry_, false, AllocationPolicy_ &gt;::view(const FusionTree&lt; Rank, Symmetry &gt; &amp;f1, const FusionTree&lt; CoRank, Symmetry &gt; &amp;f2)'],['../classXped_1_1Tensor_3_01Scalar___00_01Rank_00_01CoRank_00_01Symmetry___00_01false_00_01AllocationPolicy___01_4.html#af40b3748367daa6d74c61b30a785aab4',1,'Xped::Tensor&lt; Scalar_, Rank, CoRank, Symmetry_, false, AllocationPolicy_ &gt;::view(const FusionTree&lt; Rank, Symmetry &gt; &amp;f1, const FusionTree&lt; CoRank, Symmetry &gt; &amp;f2, std::size_t block_number)'],['../classXped_1_1Tensor_3_01Scalar___00_01Rank_00_01CoRank_00_01Symmetry___00_01false_00_01AllocationPolicy___01_4.html#a495c90bf473478eb70f16270c012418d',1,'Xped::Tensor&lt; Scalar_, Rank, CoRank, Symmetry_, false, AllocationPolicy_ &gt;::view(const FusionTree&lt; Rank, Symmetry &gt; &amp;f1, const FusionTree&lt; CoRank, Symmetry &gt; &amp;f2) const'],['../classXped_1_1Tensor_3_01Scalar___00_01Rank_00_01CoRank_00_01Symmetry___00_01false_00_01AllocationPolicy___01_4.html#a9039700a02a8d9029fe2c991b953df98',1,'Xped::Tensor&lt; Scalar_, Rank, CoRank, Symmetry_, false, AllocationPolicy_ &gt;::view(const FusionTree&lt; Rank, Symmetry &gt; &amp;f1, const FusionTree&lt; CoRank, Symmetry &gt; &amp;f2, std::size_t block_number) const']]]
];
